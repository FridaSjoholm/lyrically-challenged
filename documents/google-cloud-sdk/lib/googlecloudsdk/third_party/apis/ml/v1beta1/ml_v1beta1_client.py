"""Generated client library for ml version v1beta1."""
# NOTE: This file is autogenerated and should not be edited by hand.
from apitools.base.py import base_api
from googlecloudsdk.third_party.apis.ml.v1beta1 import ml_v1beta1_messages as messages


class MlV1beta1(base_api.BaseApiClient):
  """Generated client library for service ml version v1beta1."""

  MESSAGES_MODULE = messages
  BASE_URL = u'https://ml.googleapis.com/'

  _PACKAGE = u'ml'
  _SCOPES = [u'https://www.googleapis.com/auth/cloud-platform']
  _VERSION = u'v1beta1'
  _CLIENT_ID = '1042881264118.apps.googleusercontent.com'
  _CLIENT_SECRET = 'x_Tw5K8nnjoRAqULM9PFAC2b'
  _USER_AGENT = 'x_Tw5K8nnjoRAqULM9PFAC2b'
  _CLIENT_CLASS_NAME = u'MlV1beta1'
  _URL_VERSION = u'v1beta1'
  _API_KEY = None

  def __init__(self, url='', credentials=None,
               get_credentials=True, http=None, model=None,
               log_request=False, log_response=False,
               credentials_args=None, default_global_params=None,
               additional_http_headers=None):
    """Create a new ml handle."""
    url = url or self.BASE_URL
    super(MlV1beta1, self).__init__(
        url, credentials=credentials,
        get_credentials=get_credentials, http=http, model=model,
        log_request=log_request, log_response=log_response,
        credentials_args=credentials_args,
        default_global_params=default_global_params,
        additional_http_headers=additional_http_headers)
    self.projects_jobs = self.ProjectsJobsService(self)
    self.projects_models_versions = self.ProjectsModelsVersionsService(self)
    self.projects_models = self.ProjectsModelsService(self)
    self.projects_operations = self.ProjectsOperationsService(self)
    self.projects = self.ProjectsService(self)

  class ProjectsJobsService(base_api.BaseApiService):
    """Service class for the projects_jobs resource."""

    _NAME = u'projects_jobs'

    def __init__(self, client):
      super(MlV1beta1.ProjectsJobsService, self).__init__(client)
      self._upload_configs = {
          }

    def Cancel(self, request, global_params=None):
      """Cancels a running job.

      Args:
        request: (MlProjectsJobsCancelRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleProtobufEmpty) The response message.
      """
      config = self.GetMethodConfig('Cancel')
      return self._RunMethod(
          config, request, global_params=global_params)

    Cancel.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'POST',
        method_id=u'ml.projects.jobs.cancel',
        ordered_params=[u'projectsId', u'jobsId'],
        path_params=[u'jobsId', u'projectsId'],
        query_params=[],
        relative_path=u'v1beta1/projects/{projectsId}/jobs/{jobsId}:cancel',
        request_field=u'googleCloudMlV1beta1CancelJobRequest',
        request_type_name=u'MlProjectsJobsCancelRequest',
        response_type_name=u'GoogleProtobufEmpty',
        supports_download=False,
    )

    def Create(self, request, global_params=None):
      """Creates a training or a batch prediction job.

      Args:
        request: (MlProjectsJobsCreateRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleCloudMlV1beta1Job) The response message.
      """
      config = self.GetMethodConfig('Create')
      return self._RunMethod(
          config, request, global_params=global_params)

    Create.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'POST',
        method_id=u'ml.projects.jobs.create',
        ordered_params=[u'projectsId'],
        path_params=[u'projectsId'],
        query_params=[],
        relative_path=u'v1beta1/projects/{projectsId}/jobs',
        request_field=u'googleCloudMlV1beta1Job',
        request_type_name=u'MlProjectsJobsCreateRequest',
        response_type_name=u'GoogleCloudMlV1beta1Job',
        supports_download=False,
    )

    def Get(self, request, global_params=None):
      """Describes a job.

      Args:
        request: (MlProjectsJobsGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleCloudMlV1beta1Job) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

    Get.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'GET',
        method_id=u'ml.projects.jobs.get',
        ordered_params=[u'projectsId', u'jobsId'],
        path_params=[u'jobsId', u'projectsId'],
        query_params=[],
        relative_path=u'v1beta1/projects/{projectsId}/jobs/{jobsId}',
        request_field='',
        request_type_name=u'MlProjectsJobsGetRequest',
        response_type_name=u'GoogleCloudMlV1beta1Job',
        supports_download=False,
    )

    def List(self, request, global_params=None):
      """Lists the jobs in the project.

      Args:
        request: (MlProjectsJobsListRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleCloudMlV1beta1ListJobsResponse) The response message.
      """
      config = self.GetMethodConfig('List')
      return self._RunMethod(
          config, request, global_params=global_params)

    List.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'GET',
        method_id=u'ml.projects.jobs.list',
        ordered_params=[u'projectsId'],
        path_params=[u'projectsId'],
        query_params=[u'filter', u'pageSize', u'pageToken'],
        relative_path=u'v1beta1/projects/{projectsId}/jobs',
        request_field='',
        request_type_name=u'MlProjectsJobsListRequest',
        response_type_name=u'GoogleCloudMlV1beta1ListJobsResponse',
        supports_download=False,
    )

  class ProjectsModelsVersionsService(base_api.BaseApiService):
    """Service class for the projects_models_versions resource."""

    _NAME = u'projects_models_versions'

    def __init__(self, client):
      super(MlV1beta1.ProjectsModelsVersionsService, self).__init__(client)
      self._upload_configs = {
          }

    def Create(self, request, global_params=None):
      """Creates a new version of a model from a trained TensorFlow model.

If the version created in the cloud by this call is the first deployed
version of the specified model, it will be made the default version of the
model. When you add a version to a model that already has one or more
versions, the default version does not automatically change. If you want a
new version to be the default, you must call
[projects.models.versions.setDefault](/ml/reference/rest/v1beta1/projects.models.versions/setDefault).

      Args:
        request: (MlProjectsModelsVersionsCreateRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleLongrunningOperation) The response message.
      """
      config = self.GetMethodConfig('Create')
      return self._RunMethod(
          config, request, global_params=global_params)

    Create.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'POST',
        method_id=u'ml.projects.models.versions.create',
        ordered_params=[u'projectsId', u'modelsId'],
        path_params=[u'modelsId', u'projectsId'],
        query_params=[],
        relative_path=u'v1beta1/projects/{projectsId}/models/{modelsId}/versions',
        request_field=u'googleCloudMlV1beta1Version',
        request_type_name=u'MlProjectsModelsVersionsCreateRequest',
        response_type_name=u'GoogleLongrunningOperation',
        supports_download=False,
    )

    def Delete(self, request, global_params=None):
      """Deletes a model version.

Each model can have multiple versions deployed and in use at any given
time. Use this method to remove a single version.

Note: You cannot delete the version that is set as the default version
of the model unless it is the only remaining version.

      Args:
        request: (MlProjectsModelsVersionsDeleteRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleLongrunningOperation) The response message.
      """
      config = self.GetMethodConfig('Delete')
      return self._RunMethod(
          config, request, global_params=global_params)

    Delete.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'DELETE',
        method_id=u'ml.projects.models.versions.delete',
        ordered_params=[u'projectsId', u'modelsId', u'versionsId'],
        path_params=[u'modelsId', u'projectsId', u'versionsId'],
        query_params=[],
        relative_path=u'v1beta1/projects/{projectsId}/models/{modelsId}/versions/{versionsId}',
        request_field='',
        request_type_name=u'MlProjectsModelsVersionsDeleteRequest',
        response_type_name=u'GoogleLongrunningOperation',
        supports_download=False,
    )

    def Get(self, request, global_params=None):
      """Gets information about a model version.

Models can have multiple versions. You can call
[projects.models.versions.list](/ml/reference/rest/v1beta1/projects.models.versions/list)
to get the same information that this method returns for all of the
versions of a model.

      Args:
        request: (MlProjectsModelsVersionsGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleCloudMlV1beta1Version) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

    Get.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'GET',
        method_id=u'ml.projects.models.versions.get',
        ordered_params=[u'projectsId', u'modelsId', u'versionsId'],
        path_params=[u'modelsId', u'projectsId', u'versionsId'],
        query_params=[],
        relative_path=u'v1beta1/projects/{projectsId}/models/{modelsId}/versions/{versionsId}',
        request_field='',
        request_type_name=u'MlProjectsModelsVersionsGetRequest',
        response_type_name=u'GoogleCloudMlV1beta1Version',
        supports_download=False,
    )

    def List(self, request, global_params=None):
      """Gets basic information about all the versions of a model.

If you expect that a model has a lot of versions, or if you need to handle
only a limited number of results at a time, you can request that the list
be retrieved in batches (called pages):

      Args:
        request: (MlProjectsModelsVersionsListRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleCloudMlV1beta1ListVersionsResponse) The response message.
      """
      config = self.GetMethodConfig('List')
      return self._RunMethod(
          config, request, global_params=global_params)

    List.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'GET',
        method_id=u'ml.projects.models.versions.list',
        ordered_params=[u'projectsId', u'modelsId'],
        path_params=[u'modelsId', u'projectsId'],
        query_params=[u'pageSize', u'pageToken'],
        relative_path=u'v1beta1/projects/{projectsId}/models/{modelsId}/versions',
        request_field='',
        request_type_name=u'MlProjectsModelsVersionsListRequest',
        response_type_name=u'GoogleCloudMlV1beta1ListVersionsResponse',
        supports_download=False,
    )

    def SetDefault(self, request, global_params=None):
      """Designates a version to be the default for the model.

The default version is used for prediction requests made against the model
that don't specify a version.

The first version to be created for a model is automatically set as the
default. You must make any subsequent changes to the default version
setting manually using this method.

      Args:
        request: (MlProjectsModelsVersionsSetDefaultRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleCloudMlV1beta1Version) The response message.
      """
      config = self.GetMethodConfig('SetDefault')
      return self._RunMethod(
          config, request, global_params=global_params)

    SetDefault.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'POST',
        method_id=u'ml.projects.models.versions.setDefault',
        ordered_params=[u'projectsId', u'modelsId', u'versionsId'],
        path_params=[u'modelsId', u'projectsId', u'versionsId'],
        query_params=[],
        relative_path=u'v1beta1/projects/{projectsId}/models/{modelsId}/versions/{versionsId}:setDefault',
        request_field=u'googleCloudMlV1beta1SetDefaultVersionRequest',
        request_type_name=u'MlProjectsModelsVersionsSetDefaultRequest',
        response_type_name=u'GoogleCloudMlV1beta1Version',
        supports_download=False,
    )

  class ProjectsModelsService(base_api.BaseApiService):
    """Service class for the projects_models resource."""

    _NAME = u'projects_models'

    def __init__(self, client):
      super(MlV1beta1.ProjectsModelsService, self).__init__(client)
      self._upload_configs = {
          }

    def Create(self, request, global_params=None):
      """Creates a model which will later contain one or more versions.

You must add at least one version before you can request predictions from
the model. Add versions by calling
[projects.models.versions.create](/ml/reference/rest/v1beta1/projects.models.versions/create).

      Args:
        request: (MlProjectsModelsCreateRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleCloudMlV1beta1Model) The response message.
      """
      config = self.GetMethodConfig('Create')
      return self._RunMethod(
          config, request, global_params=global_params)

    Create.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'POST',
        method_id=u'ml.projects.models.create',
        ordered_params=[u'projectsId'],
        path_params=[u'projectsId'],
        query_params=[],
        relative_path=u'v1beta1/projects/{projectsId}/models',
        request_field=u'googleCloudMlV1beta1Model',
        request_type_name=u'MlProjectsModelsCreateRequest',
        response_type_name=u'GoogleCloudMlV1beta1Model',
        supports_download=False,
    )

    def Delete(self, request, global_params=None):
      """Deletes a model.

You can only delete a model if there are no versions in it. You can delete
versions by calling
[projects.models.versions.delete](/ml/reference/rest/v1beta1/projects.models.versions/delete).

      Args:
        request: (MlProjectsModelsDeleteRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleLongrunningOperation) The response message.
      """
      config = self.GetMethodConfig('Delete')
      return self._RunMethod(
          config, request, global_params=global_params)

    Delete.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'DELETE',
        method_id=u'ml.projects.models.delete',
        ordered_params=[u'projectsId', u'modelsId'],
        path_params=[u'modelsId', u'projectsId'],
        query_params=[],
        relative_path=u'v1beta1/projects/{projectsId}/models/{modelsId}',
        request_field='',
        request_type_name=u'MlProjectsModelsDeleteRequest',
        response_type_name=u'GoogleLongrunningOperation',
        supports_download=False,
    )

    def Get(self, request, global_params=None):
      """Gets information about a model, including its name, the description (if.
set), and the default version (if at least one version of the model has
been deployed).

      Args:
        request: (MlProjectsModelsGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleCloudMlV1beta1Model) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

    Get.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'GET',
        method_id=u'ml.projects.models.get',
        ordered_params=[u'projectsId', u'modelsId'],
        path_params=[u'modelsId', u'projectsId'],
        query_params=[],
        relative_path=u'v1beta1/projects/{projectsId}/models/{modelsId}',
        request_field='',
        request_type_name=u'MlProjectsModelsGetRequest',
        response_type_name=u'GoogleCloudMlV1beta1Model',
        supports_download=False,
    )

    def List(self, request, global_params=None):
      """Lists the models in a project.

Each project can contain multiple models, and each model can have multiple
versions.

      Args:
        request: (MlProjectsModelsListRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleCloudMlV1beta1ListModelsResponse) The response message.
      """
      config = self.GetMethodConfig('List')
      return self._RunMethod(
          config, request, global_params=global_params)

    List.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'GET',
        method_id=u'ml.projects.models.list',
        ordered_params=[u'projectsId'],
        path_params=[u'projectsId'],
        query_params=[u'pageSize', u'pageToken'],
        relative_path=u'v1beta1/projects/{projectsId}/models',
        request_field='',
        request_type_name=u'MlProjectsModelsListRequest',
        response_type_name=u'GoogleCloudMlV1beta1ListModelsResponse',
        supports_download=False,
    )

  class ProjectsOperationsService(base_api.BaseApiService):
    """Service class for the projects_operations resource."""

    _NAME = u'projects_operations'

    def __init__(self, client):
      super(MlV1beta1.ProjectsOperationsService, self).__init__(client)
      self._upload_configs = {
          }

    def Cancel(self, request, global_params=None):
      """Starts asynchronous cancellation on a long-running operation.  The server.
makes a best effort to cancel the operation, but success is not
guaranteed.  If the server doesn't support this method, it returns
`google.rpc.Code.UNIMPLEMENTED`.  Clients can use
Operations.GetOperation or
other methods to check whether the cancellation succeeded or whether the
operation completed despite cancellation. On successful cancellation,
the operation is not deleted; instead, it becomes an operation with
an Operation.error value with a google.rpc.Status.code of 1,
corresponding to `Code.CANCELLED`.

      Args:
        request: (MlProjectsOperationsCancelRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleProtobufEmpty) The response message.
      """
      config = self.GetMethodConfig('Cancel')
      return self._RunMethod(
          config, request, global_params=global_params)

    Cancel.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'POST',
        method_id=u'ml.projects.operations.cancel',
        ordered_params=[u'projectsId', u'operationsId'],
        path_params=[u'operationsId', u'projectsId'],
        query_params=[],
        relative_path=u'v1beta1/projects/{projectsId}/operations/{operationsId}:cancel',
        request_field='',
        request_type_name=u'MlProjectsOperationsCancelRequest',
        response_type_name=u'GoogleProtobufEmpty',
        supports_download=False,
    )

    def Delete(self, request, global_params=None):
      """Deletes a long-running operation. This method indicates that the client is.
no longer interested in the operation result. It does not cancel the
operation. If the server doesn't support this method, it returns
`google.rpc.Code.UNIMPLEMENTED`.

      Args:
        request: (MlProjectsOperationsDeleteRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleProtobufEmpty) The response message.
      """
      config = self.GetMethodConfig('Delete')
      return self._RunMethod(
          config, request, global_params=global_params)

    Delete.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'DELETE',
        method_id=u'ml.projects.operations.delete',
        ordered_params=[u'projectsId', u'operationsId'],
        path_params=[u'operationsId', u'projectsId'],
        query_params=[],
        relative_path=u'v1beta1/projects/{projectsId}/operations/{operationsId}',
        request_field='',
        request_type_name=u'MlProjectsOperationsDeleteRequest',
        response_type_name=u'GoogleProtobufEmpty',
        supports_download=False,
    )

    def Get(self, request, global_params=None):
      """Gets the latest state of a long-running operation.  Clients can use this.
method to poll the operation result at intervals as recommended by the API
service.

      Args:
        request: (MlProjectsOperationsGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleLongrunningOperation) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

    Get.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'GET',
        method_id=u'ml.projects.operations.get',
        ordered_params=[u'projectsId', u'operationsId'],
        path_params=[u'operationsId', u'projectsId'],
        query_params=[],
        relative_path=u'v1beta1/projects/{projectsId}/operations/{operationsId}',
        request_field='',
        request_type_name=u'MlProjectsOperationsGetRequest',
        response_type_name=u'GoogleLongrunningOperation',
        supports_download=False,
    )

    def List(self, request, global_params=None):
      """Lists operations that match the specified filter in the request. If the.
server doesn't support this method, it returns `UNIMPLEMENTED`.

NOTE: the `name` binding below allows API services to override the binding
to use different resource name schemes, such as `users/*/operations`.

      Args:
        request: (MlProjectsOperationsListRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleLongrunningListOperationsResponse) The response message.
      """
      config = self.GetMethodConfig('List')
      return self._RunMethod(
          config, request, global_params=global_params)

    List.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'GET',
        method_id=u'ml.projects.operations.list',
        ordered_params=[u'projectsId'],
        path_params=[u'projectsId'],
        query_params=[u'filter', u'pageSize', u'pageToken'],
        relative_path=u'v1beta1/projects/{projectsId}/operations',
        request_field='',
        request_type_name=u'MlProjectsOperationsListRequest',
        response_type_name=u'GoogleLongrunningListOperationsResponse',
        supports_download=False,
    )

  class ProjectsService(base_api.BaseApiService):
    """Service class for the projects resource."""

    _NAME = u'projects'

    def __init__(self, client):
      super(MlV1beta1.ProjectsService, self).__init__(client)
      self._upload_configs = {
          }

    def GetConfig(self, request, global_params=None):
      """Get the service account information associated with your project. You need.
this information in order to grant the service account persmissions for
the Google Cloud Storage location where you put your model training code
for training the model with Google Cloud Machine Learning.

      Args:
        request: (MlProjectsGetConfigRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleCloudMlV1beta1GetConfigResponse) The response message.
      """
      config = self.GetMethodConfig('GetConfig')
      return self._RunMethod(
          config, request, global_params=global_params)

    GetConfig.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'GET',
        method_id=u'ml.projects.getConfig',
        ordered_params=[u'projectsId'],
        path_params=[u'projectsId'],
        query_params=[],
        relative_path=u'v1beta1/projects/{projectsId}:getConfig',
        request_field='',
        request_type_name=u'MlProjectsGetConfigRequest',
        response_type_name=u'GoogleCloudMlV1beta1GetConfigResponse',
        supports_download=False,
    )

    def Predict(self, request, global_params=None):
      """Performs prediction on the data in the request.

Responses are very similar to requests. There are two top-level fields,
each of which are JSON lists:

<dl>
  <dt>predictions</dt>
  <dd>The list of predictions, one per instance in the request.</dd>
  <dt>error</dt>
  <dd>An error message returned instead of a prediction list if any
      instance produced an error.</dd>
</dl>

If the call is successful, the response body will contain one prediction
entry per instance in the request body. If prediction fails for any
instance, the response body will contain no predictions and will contian
a single error entry instead.

Even though there is one prediction per instance, the format of a
prediction is not directly related to the format of an instance.
Predictions take whatever format is specified in the outputs collection
defined in the model. The collection of predictions is returned in a JSON
list. Each member of the list can be a simple value, a list, or a JSON
object of any complexity. If your model has more than one output tensor,
each prediction will be a JSON object containing a name/value pair for each
output. The names identify the output aliases in the graph.

The following examples show some possible responses:

A simple set of predictions for three input instances, where each
prediction is an integer value:
<pre>
{"predictions": [5, 4, 3]}
</pre>
A more complex set of predictions, each containing two named values that
correspond to output tensors, named **label** and **scores** respectively.
The value of **label** is the predicted category ("car" or "beach") and
**scores** contains a list of probabilities for that instance across the
possible categories.
<pre>
{"predictions": [{"label": "beach", "scores": [0.1, 0.9]},
                 {"label": "car", "scores": [0.75, 0.25]}]}
</pre>
A response when there is an error processing an input instance:
<pre>
{"error": "Divide by zero"}
</pre>

      Args:
        request: (MlProjectsPredictRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleApiHttpBody) The response message.
      """
      config = self.GetMethodConfig('Predict')
      return self._RunMethod(
          config, request, global_params=global_params)

    Predict.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'POST',
        method_id=u'ml.projects.predict',
        ordered_params=[u'projectsId'],
        path_params=[u'projectsId'],
        query_params=[],
        relative_path=u'v1beta1/projects/{projectsId}:predict',
        request_field=u'googleCloudMlV1beta1PredictRequest',
        request_type_name=u'MlProjectsPredictRequest',
        response_type_name=u'GoogleApiHttpBody',
        supports_download=False,
    )
